<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="ILD1420" Id="{8c4f0a94-3b42-4b95-a0bb-7a0189ed27a7}" SpecialFunc="None">
    <Declaration><![CDATA[// By Devika Ajith, Daniel Lindner and Oliver Schubert.
// June 2022
//
// This functionblock contains the logic needed to get a distance value from the raw RS422 bytes recieved BY an EL6021 clamp.
//

FUNCTION_BLOCK ILD1420
VAR_INPUT
	RxBuffer : ComBuffer;			// RxBuffer is used to pass data recieved by the EL6021 clap.
									// We expect the first 3 bytes of that buffer to contain data relevant to the distance measurement.
	
	//TxBuffer	: ComBuffer;		//Since the functionality provided BY THIS functionblock does NOT include ANY sending logic,
									//the TxBuffer is commented out FOR now. THIS might change with future functionality extensions.
END_VAR
VAR_OUTPUT
	lrDistance  : LREAL := 0;
	bInRange 	: BOOL;
END_VAR
VAR CONSTANT
	lrSMR 		: LREAL := 50.0;				// Start of Measuring Range
	lrEMR 		: LREAL := 150.0;				// End of Measuring Range
	lrMR  		: LREAL := lrEMR - lrSMR;		// Measuring Range
END_VAR
VAR
	//Receive data
	fbReceiveByte					: ReceiveByte;				
	first_three_bytes_of_rx_buffer  : ARRAY[0..2] OF BYTE;		// buffer storage for the three bytes that contain the distance information
	uiRcvIndex						: UINT := 0;				// Counter

	//decoding values
	diDistance_As_String_Of_Bits	: DINT;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[// https://www.micro-epsilon.de/download/manuals/man--optoNCDT-1420--en.pdf
// Refer Pg 15 Resolution details
// Pg 84 - Byte decoding


fbReceiveByte(RXbuffer := RxBuffer);		// init FB fbReceiveByte with Buffer

// get received Bytes from the EL6021 and store them into an array of Bytes
// These bytes contain error, transmissions, ect. -bits and also the bits for the distance information.
// We store all bits and seperate the distance bits from the error, transmissions, ect. -bits in the next step
WHILE fbReceiveByte.ByteReceived AND (uiRcvIndex <= SIZEOF(first_three_bytes_of_rx_buffer)) DO
	fbReceiveByte(RXbuffer := RxBuffer);
	IF (fbReceiveByte.ReceivedByte.7) = 0 THEN
		first_three_bytes_of_rx_buffer[uiRcvIndex] := fbReceiveByte.ReceivedByte;
		uiRcvIndex := uiRcvIndex + 1;
	ELSE
		first_three_bytes_of_rx_buffer[2] := fbReceiveByte.ReceivedByte;
		uiRcvIndex	:= 0;
	END_IF
END_WHILE


// Rearrange L,M,H Refer Pg 85. We seperate the distance bits from the error, transmissions, ect. -bits in this step.
// MemCopy is a possilbe way to simplify code. But since we need to work with bit and not buyts, this is actually the more readable code.
// Also TwinCAT demands CONST values when working with bit handeling, so loops are also not possible.
diDistance_As_String_Of_Bits.0 	:= first_three_bytes_of_rx_buffer[0].0;
diDistance_As_String_Of_Bits.1 	:= first_three_bytes_of_rx_buffer[0].1;
diDistance_As_String_Of_Bits.2 	:= first_three_bytes_of_rx_buffer[0].2;
diDistance_As_String_Of_Bits.3 	:= first_three_bytes_of_rx_buffer[0].3;
diDistance_As_String_Of_Bits.4 	:= first_three_bytes_of_rx_buffer[0].4;
diDistance_As_String_Of_Bits.5 	:= first_three_bytes_of_rx_buffer[0].5;
diDistance_As_String_Of_Bits.6 	:= first_three_bytes_of_rx_buffer[1].0;
diDistance_As_String_Of_Bits.7 	:= first_three_bytes_of_rx_buffer[1].1;
diDistance_As_String_Of_Bits.8 	:= first_three_bytes_of_rx_buffer[1].2;
diDistance_As_String_Of_Bits.9 	:= first_three_bytes_of_rx_buffer[1].3;
diDistance_As_String_Of_Bits.10 := first_three_bytes_of_rx_buffer[1].4;
diDistance_As_String_Of_Bits.11	:= first_three_bytes_of_rx_buffer[1].5;
diDistance_As_String_Of_Bits.12 := first_three_bytes_of_rx_buffer[2].0;
diDistance_As_String_Of_Bits.13 := first_three_bytes_of_rx_buffer[2].1;
diDistance_As_String_Of_Bits.14 := first_three_bytes_of_rx_buffer[2].2;
diDistance_As_String_Of_Bits.15 := first_three_bytes_of_rx_buffer[2].3;


// conversion von bits to LREAL via formula from
// https://www.micro-epsilon.de/download/manuals/man--optoNCDT-1420--en.pdf
lrDistance := 50.0 + 1.0/100.0 * (102.0/65520.0 * DINT_TO_LREAL(diDistance_As_String_Of_Bits) - 1.0) * lrMR;

// to distinguish values wich are out of range, choose arbitrary value far away from SMR and EMR
IF lrDistance < lrSMR OR lrDistance > lrEMR THEN
	bInRange := FALSE;
	lrDistance := 999;
ELSE
	bInRange := TRUE;
END_IF
]]></ST>
    </Implementation>
    <LineIds Name="ILD1420">
      <LineId Id="1002" Count="5" />
      <LineId Id="1060" Count="0" />
      <LineId Id="1008" Count="0" />
      <LineId Id="1062" Count="1" />
      <LineId Id="1009" Count="9" />
      <LineId Id="1061" Count="0" />
      <LineId Id="1019" Count="24" />
      <LineId Id="1064" Count="0" />
      <LineId Id="1044" Count="1" />
      <LineId Id="1047" Count="0" />
      <LineId Id="1059" Count="0" />
      <LineId Id="1055" Count="1" />
      <LineId Id="1048" Count="0" />
      <LineId Id="346" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>