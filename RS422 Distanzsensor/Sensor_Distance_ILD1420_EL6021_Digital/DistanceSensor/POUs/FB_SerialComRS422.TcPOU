<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_SerialComRS422" Id="{2135fae3-47ca-4cbe-b35a-ad571e39e6c3}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_SerialComRS422
VAR_IN_OUT
	stReceiveData 	: EL6inData22B;
	stTransmitData 	: EL6outData22B;
END_VAR
VAR_OUTPUT
	fDistance : LREAL;
	eReceiveErrorID	: ComError_t;
END_VAR
VAR
	//Receive Buffer
	fbEL6021Ctrl					: SerialLineControl;
	RxBuffer 						: ComBuffer;
	TxBuffer						: ComBuffer;
	//Receive Data
	fbReceiveByte					: ReceiveByte;				
	nFirstThreeBytesOfBuffer  		: ARRAY[0..2] OF BYTE;		// buffer storage for the three bytes that contain the distance information
	nRcvIndex						: UINT := 0;				// Counter
	nDistanceAsStringOfBits			: DINT;
	
	
	nSuffix : BYTE;
	fbReceive : ReceiveData;
	aReceiveData : ARRAY [0..2] OF BYTE;
	nReceiveCounter : UDINT;
	bCheck : BOOL;
END_VAR
VAR CONSTANT
	fSMR 		: LREAL := 50.0;				// Start of Measuring Range
	fEMR 		: LREAL := 150.0;				// End of Measuring Range
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[fbEL6021Ctrl(
			Mode:= SERIALLINEMODE_EL6_22B,
			pComIn:= ADR(stReceiveData),
			pComOut:= ADR(stTransmitData),
			SizeComIn:= SIZEOF(stReceiveData),
			Error=>,
			ErrorID=>,
			TxBuffer:=TxBuffer,
			RxBuffer:=RxBuffer,);
			
nSuffix := 128;

fbReceive(
	RXbuffer:= RxBuffer,
	pPrefix := ADR(nSuffix),LenPrefix:=1,
	pReceiveData := ADR(aReceiveData),
	SizeReceiveData  := 1,								
	Error => eReceiveErrorID,
	DataReceived=>);
		
IF fbReceive.DataReceived THEN							
	nReceiveCounter := nReceiveCounter + 1;
END_IF

IF aReceiveData[2].7 AND aReceiveData[1].6 AND NOT aReceiveData[0].6 AND NOT aReceiveData[0].7 THEN
	bCheck := TRUE;
ELSE
	bCheck := FALSE;
END_IF

IF bCheck THEN
	nDistanceAsStringOfBits.0 	:= aReceiveData[0].0;
	nDistanceAsStringOfBits.1 	:= aReceiveData[0].1;
	nDistanceAsStringOfBits.2 	:= aReceiveData[0].2;
	nDistanceAsStringOfBits.3 	:= aReceiveData[0].3;
	nDistanceAsStringOfBits.4 	:= aReceiveData[0].4;
	nDistanceAsStringOfBits.5 	:= aReceiveData[0].5;
	nDistanceAsStringOfBits.6 	:= aReceiveData[1].0;
	nDistanceAsStringOfBits.7 	:= aReceiveData[1].1;
	nDistanceAsStringOfBits.8 	:= aReceiveData[1].2;
	nDistanceAsStringOfBits.9 	:= aReceiveData[1].3;
	nDistanceAsStringOfBits.10 	:= aReceiveData[1].4;
	nDistanceAsStringOfBits.11	:= aReceiveData[1].5;
	nDistanceAsStringOfBits.12 	:= aReceiveData[2].0;
	nDistanceAsStringOfBits.13 	:= aReceiveData[2].1;
	nDistanceAsStringOfBits.14 	:= aReceiveData[2].2;
	nDistanceAsStringOfBits.15 	:= aReceiveData[2].3;
END_IF
	
		
doConvertToDistanceValue(nBitString:=nDistanceAsStringOfBits, fMax:=fEMR, fMin:=fSMR);	
			
			
			
			
			

//fbReceiveByte(RXbuffer := RxBuffer, Error => eReceiveErrorID);

//WHILE fbReceiveByte.ByteReceived AND (nRcvIndex <= SIZEOF(nFirstThreeBytesOfBuffer)) DO
//	fbReceiveByte(RXbuffer := RxBuffer);
//	IF (fbReceiveByte.ReceivedByte.7) = 0 THEN
//		nFirstThreeBytesOfBuffer[nRcvIndex] := fbReceiveByte.ReceivedByte;
//		nRcvIndex := nRcvIndex + 1;
//	ELSE
//		nFirstThreeBytesOfBuffer[2] := fbReceiveByte.ReceivedByte;
//		nRcvIndex	:= 0;
//	END_IF
//END_WHILE

//doSortBits(nByteBuffer:=nFirstThreeBytesOfBuffer);
//doConvertToDistanceValue(nBitString:=nDistanceAsStringOfBits, fMax:=fEMR, fMin:=fSMR);	





]]></ST>
    </Implementation>
    <Method Name="doConvertToDistanceValue" Id="{331c485d-7840-4e25-8319-f55a586a5f0d}">
      <Declaration><![CDATA[METHOD PRIVATE doConvertToDistanceValue
VAR_INPUT
	nBitString : DINT;
	fMax : LREAL;
	fMIn : LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fDistance := 50.0 + 1.0/100.0 * (102.0/65520.0 * DINT_TO_LREAL(nBitString) - 1.0) * (fMax - fMIn);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="doSortBits" Id="{8d19dca6-c1dd-418d-8b4b-45882b11fbb2}">
      <Declaration><![CDATA[METHOD PRIVATE doSortBits
VAR_INPUT
	nByteBuffer : ARRAY [0..2] OF BYTE;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Rearrange L,M,H Refer Pg 85. We seperate the distance bits from the error, transmissions, ect. -bits in this step.
// MemCopy is a possilbe way to simplify code. But since we need to work with bit and not buyts, this is actually the more readable code.
// Also TwinCAT demands CONST values when working with bit handeling, so loops are also not possible.
nDistanceAsStringOfBits.0 	:= nByteBuffer[0].0;
nDistanceAsStringOfBits.1 	:= nByteBuffer[0].1;
nDistanceAsStringOfBits.2 	:= nByteBuffer[0].2;
nDistanceAsStringOfBits.3 	:= nByteBuffer[0].3;
nDistanceAsStringOfBits.4 	:= nByteBuffer[0].4;
nDistanceAsStringOfBits.5 	:= nByteBuffer[0].5;
nDistanceAsStringOfBits.6 	:= nByteBuffer[1].0;
nDistanceAsStringOfBits.7 	:= nByteBuffer[1].1;
nDistanceAsStringOfBits.8 	:= nByteBuffer[1].2;
nDistanceAsStringOfBits.9 	:= nByteBuffer[1].3;
nDistanceAsStringOfBits.10 	:= nByteBuffer[1].4;
nDistanceAsStringOfBits.11	:= nByteBuffer[1].5;
nDistanceAsStringOfBits.12 	:= nByteBuffer[2].0;
nDistanceAsStringOfBits.13 	:= nByteBuffer[2].1;
nDistanceAsStringOfBits.14 	:= nByteBuffer[2].2;
nDistanceAsStringOfBits.15 	:= nByteBuffer[2].3;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_SerialComRS422">
      <LineId Id="1150" Count="7" />
      <LineId Id="1145" Count="0" />
      <LineId Id="1181" Count="0" />
      <LineId Id="1207" Count="0" />
      <LineId Id="1191" Count="2" />
      <LineId Id="1262" Count="0" />
      <LineId Id="1196" Count="6" />
      <LineId Id="1182" Count="0" />
      <LineId Id="1217" Count="0" />
      <LineId Id="1216" Count="0" />
      <LineId Id="1218" Count="0" />
      <LineId Id="1221" Count="1" />
      <LineId Id="1219" Count="0" />
      <LineId Id="1240" Count="0" />
      <LineId Id="1224" Count="0" />
      <LineId Id="1244" Count="15" />
      <LineId Id="1265" Count="0" />
      <LineId Id="1264" Count="0" />
      <LineId Id="1260" Count="0" />
      <LineId Id="1183" Count="5" />
      <LineId Id="1149" Count="0" />
      <LineId Id="1007" Count="0" />
      <LineId Id="1063" Count="0" />
      <LineId Id="1009" Count="9" />
      <LineId Id="1141" Count="0" />
      <LineId Id="1140" Count="0" />
      <LineId Id="1263" Count="0" />
      <LineId Id="1144" Count="0" />
      <LineId Id="1133" Count="0" />
      <LineId Id="1039" Count="1" />
      <LineId Id="1048" Count="0" />
      <LineId Id="346" Count="0" />
    </LineIds>
    <LineIds Name="FB_SerialComRS422.doConvertToDistanceValue">
      <LineId Id="6" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_SerialComRS422.doSortBits">
      <LineId Id="8" Count="17" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>