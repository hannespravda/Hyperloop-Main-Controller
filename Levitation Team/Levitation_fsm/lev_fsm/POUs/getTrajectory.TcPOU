<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.10">
  <POU Name="getTrajectory" Id="{8eee31b8-34af-4fe9-b139-58ad1f782e36}" SpecialFunc="None">
    <Declaration><![CDATA[(*
 *
 * File: trajectory_generator_sim.st
 *
 * IEC 61131-3 Structured Text (ST) code generated for subsystem "trajectory_generator_sim/getTrajectory"
 *
 * Model name                      : trajectory_generator_sim
 * Model version                   : 3.28
 * Model creator                   : Gjergji Luarasi
 * Model last modified by          : Gjergji Luarasi
 * Model last modified on          : Thu Oct 27 01:27:46 2022
 * Model sample time               : 0.0005s
 * Subsystem name                  : trajectory_generator_sim/getTrajectory
 * Subsystem sample time           : 0.1s
 * Simulink PLC Coder version      : 3.7 (R2022b) 13-May-2022
 * ST code generated on            : Thu Oct 27 01:38:31 2022
 *
 * Target IDE selection            : Beckhoff TwinCAT 3
 * Test Bench included             : No
 *
 *)
FUNCTION_BLOCK getTrajectory
VAR_INPUT
    ssMethodType: SINT;
    t: LREAL;
    Tdes: LREAL;
    z0: LREAL;
    v0: LREAL;
    a0: LREAL;
    zdes: LREAL;
    vdes: LREAL;
    ades: LREAL;
    sus_params: sus_bus;
    mag_params: mag_bus;
END_VAR
VAR_OUTPUT
    zd: LREAL;
    vd: LREAL;
    ad: LREAL;
    id: LREAL;
END_VAR
VAR
    zd_prev_not_empty: BOOL;
    zd_prev: LREAL;
    vd_prev_not_empty: BOOL;
    vd_prev: LREAL;
    ad_prev_not_empty: BOOL;
    ad_prev: LREAL;
    id_prev: LREAL;
END_VAR
VAR_TEMP
    b2: LREAL;
    Fsus: LREAL;
    varargin_1: ARRAY [0..127] OF LREAL;
    K: LREAL;
    A: ARRAY [0..8] OF LREAL;
    B: ARRAY [0..2] OF LREAL;
    r1: DINT;
    r2: DINT;
    r3: DINT;
    maxval: LREAL;
    a21: LREAL;
    rtemp: DINT;
    x_idx_1: LREAL;
    x_idx_2: LREAL;
    x_idx_0: LREAL;
    A_tmp: LREAL;
END_VAR
VAR CONSTANT
    SS_INITIALIZE: SINT := 0;
    SS_STEP: SINT := 1;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[CASE ssMethodType OF
    SS_INITIALIZE: 
        (* SystemInitialize for MATLAB Function: '<Root>/getTrajectory' *)
        zd_prev_not_empty := FALSE;
        vd_prev_not_empty := FALSE;
        ad_prev_not_empty := FALSE;
        (* '<S1>:1:25' id_prev = 0; *)
        id_prev := 0.0;
    SS_STEP: 
        (* MATLAB Function: '<Root>/getTrajectory' *)
        (* %% Solve the system of equations *)
        (* MATLAB Function 'getTrajectory': '<S1>:1' *)
        (* '<S1>:1:4' T_matrix = [ Tdes^3 Tdes^4 Tdes^5; 3*Tdes^2 4*Tdes^3 5*Tdes^4; 6*Tdes 12*Tdes^2 20*Tdes^3]; *)
        maxval := EXPT(Tdes, 3.0);
        a21 := EXPT(Tdes, 4.0);
        (* MATLAB Function: '<Root>/getTrajectory' incorporates:
         *  Inport: '<Root>/mag_params' *)
        A[0] := maxval;
        A[3] := a21;
        A[6] := EXPT(Tdes, 5.0);
        A_tmp := Tdes * Tdes;
        A[1] := A_tmp * 3.0;
        A[4] := 4.0 * maxval;
        A[7] := 5.0 * a21;
        A[2] := 6.0 * Tdes;
        A[5] := A_tmp * 12.0;
        A[8] := 20.0 * maxval;
        (* '<S1>:1:5' y = [zdes-z0-v0*Tdes-a0/2*Tdes^2; vdes-v0-a0*Tdes; ades-a0]; *)
        B[0] := ((zdes - z0) - (v0 * Tdes)) - ((a0 / 2.0) * A_tmp);
        B[1] := (vdes - v0) - (a0 * Tdes);
        B[2] := ades - a0;
        (* '<S1>:1:6' x = T_matrix\y; *)
        r1 := 0;
        r2 := 1;
        r3 := 2;
        maxval := ABS(maxval);
        a21 := ABS(A[1]);
        IF a21 > maxval THEN 
            maxval := a21;
            r1 := 1;
            r2 := 0;
        END_IF;
        IF ABS(A[2]) > maxval THEN 
            r1 := 2;
            r2 := 1;
            r3 := 0;
        END_IF;
        A[r2] := A[r2] / A[r1];
        A[r3] := A[r3] / A[r1];
        A[r2 + 3] := A[r2 + 3] - (A[r1 + 3] * A[r2]);
        A[r3 + 3] := A[r3 + 3] - (A[r1 + 3] * A[r3]);
        A[r2 + 6] := A[r2 + 6] - (A[r1 + 6] * A[r2]);
        A[r3 + 6] := A[r3 + 6] - (A[r1 + 6] * A[r3]);
        IF ABS(A[r3 + 3]) > ABS(A[r2 + 3]) THEN 
            rtemp := r2;
            r2 := r3;
            r3 := rtemp;
        END_IF;
        A[r3 + 3] := A[r3 + 3] / A[r2 + 3];
        A[r3 + 6] := A[r3 + 6] - (A[r3 + 3] * A[r2 + 6]);
        x_idx_1 := B[r2] - (B[r1] * A[r2]);
        x_idx_2 := ((B[r3] - (B[r1] * A[r3])) - (A[r3 + 3] * x_idx_1)) / A[r3 + 6];
        x_idx_1 := (x_idx_1 - (A[r2 + 6] * x_idx_2)) / A[r2 + 3];
        x_idx_0 := ((B[r1] - (A[r1 + 6] * x_idx_2)) - (A[r1 + 3] * x_idx_1)) / A[r1];
        (* %% Define the trajectory polynomial coefficiets *)
        (* '<S1>:1:8' b0 = z0; *)
        (* '<S1>:1:9' b1 = v0; *)
        (* '<S1>:1:10' b2 = a0/2; *)
        b2 := a0 / 2.0;
        (* '<S1>:1:11' b3 = x(1); *)
        (* '<S1>:1:12' b4 = x(2); *)
        (* '<S1>:1:13' b5 = x(3); *)
        (* '<S1>:1:15' if isempty(zd_prev) *)
        IF  NOT zd_prev_not_empty THEN 
            (* '<S1>:1:16' zd_prev = z0; *)
            zd_prev := z0;
            zd_prev_not_empty := TRUE;
        END_IF;
        (* '<S1>:1:18' if isempty(vd_prev) *)
        IF  NOT vd_prev_not_empty THEN 
            (* '<S1>:1:19' vd_prev = v0; *)
            vd_prev := v0;
            vd_prev_not_empty := TRUE;
        END_IF;
        (* '<S1>:1:21' if isempty(ad_prev) *)
        IF  NOT ad_prev_not_empty THEN 
            (* '<S1>:1:22' ad_prev = a0; *)
            ad_prev := a0;
            ad_prev_not_empty := TRUE;
        END_IF;
        (* '<S1>:1:24' if isempty(id_prev) *)
        (* '<S1>:1:27' if t <= Tdes *)
        IF t <= Tdes THEN 
            (* %% Define the trajectory polynomial functions *)
            (* '<S1>:1:29' zd = b0 + b1*t + b2*t^2 + b3*t^3 + b4*t^4 + b5*t^5; *)
            maxval := EXPT(t, 3.0);
            a21 := EXPT(t, 4.0);
            A_tmp := t * t;
            zd := (((((v0 * t) + z0) + (A_tmp * b2)) + (x_idx_0 * maxval)) + (x_idx_1 * a21)) + (x_idx_2 * EXPT(t, 5.0));
            (* '<S1>:1:30' vd = b1 + 2*b2*t + 3*b3*t^2 + 4*b4*t^3 + 5*b5*t^4; *)
            vd := (((((2.0 * b2) * t) + v0) + ((3.0 * x_idx_0) * A_tmp)) + ((4.0 * x_idx_1) * maxval)) + ((5.0 * x_idx_2) * a21);
            (* '<S1>:1:31' ad = 2*b2 + 6*b3*t + 12*b4*t^2 + 20*b5*t^3; *)
            ad := ((((6.0 * x_idx_0) * t) + (2.0 * b2)) + ((12.0 * x_idx_1) * A_tmp)) + ((20.0 * x_idx_2) * maxval);
            (* %% Find id through system dynamics model *)
            (* '<S1>:1:34' M = 1000; *)
            (* mass  *)
            (* '<S1>:1:35' g = 9.81; *)
            (* gravitational acceleration *)
            (* '<S1>:1:36' Fres = ad*M; *)
            (* resultant force *)
            (* '<S1>:1:37' Fg = g*M; *)
            (* gravitational force *)
            (* '<S1>:1:38' Fsus = susModel(zd,sus_params,Fg); *)
            (* 'susModel:2' zmax = sus_params.zmax; *)
            (* 'susModel:3' zcont = sus_params.zcont; *)
            (* 'susModel:4' Fmax = Fg; *)
            (* 'susModel:5' Fmin = 0; *)
            (* 'susModel:7' K = (Fmax - Fmin) / (zmax - zcont); *)
            K := 9810.0 / (sus_params.zmax - sus_params.zcont);
            (* 'susModel:8' N = Fmax - K * zmax; *)
            (* 'susModel:10' if zd > zmax *)
            IF zd > sus_params.zmax THEN 
                (* 'susModel:11' Fsus = Fg; *)
                Fsus := 9810.0;
            ELSIF zd < sus_params.zcont THEN 
                (* 'susModel:12' elseif zd < zcont *)
                (* 'susModel:13' Fsus = 0; *)
                Fsus := 0.0;
            ELSE 
                (* 'susModel:14' else *)
                (* 'susModel:15' Fsus = K * zd + N; *)
                Fsus := (9810.0 - (K * sus_params.zmax)) + (K * zd);
            END_IF;
            (* suspenssion force *)
            (* '<S1>:1:39' Fmag = Fg - Fsus - Fres; *)
            a21 := (9810.0 - Fsus) - (ad * 1000.0);
            (* magnetic force (second newton law) *)
            (* use the inverse force model to compute the desired current for the specified force and distance *)
            (* '<S1>:1:41' id = invForceModel(Fmag,1000*zd,mag_params); *)
            maxval := 1000.0 * zd;
            (* METHOD 1 *)
            (* function [id] = invForceModel(Fmag,zd,mag_params) *)
            (* Finv = scatteredInterpolant(reshape(mag_params.Fmat,1,[])', reshape(mag_params.zmat,1,[])', reshape(mag_params.invFmat,1,[])'); *)
            (* id = Finv(Fmag,zd*1000); *)
            (* if id<0 *)
            (* id=0; *)
            (* end     *)
            (* end *)
            (* METHOD 2 *)
            (* function [id] = invForceModel(Fmag,zd,mag_params) *)
            (* %% parameters *)
            (* znorm = mag_params.znorm;       % normalising constant for the input distance (1/zmax) *)
            (* Fnorm = mag_params.Fnorm;       % normalising constant for the input force (1/Fmax) *)
            (* invFmax =  mag_params.invFmax;  % gain for the inverse matrix (this is actually Imax) *)
            (* zmat = mag_params.zmat;         % (input) distance matrix  *)
            (* Fmat = mag_params.Fmat;         % (input) force matrix  *)
            (* invFmat = mag_params.invFmat;   % (output) inverse force matrix - this is actually a current matrix  *)
            
            
            (* zd_norm = zd * znorm;           % normalised input distance     *)
            (* Fmag_norm = Fmag * Fnorm;       % normalised input force *)
            
            
            (* %% compute desired current *)
            (* if (Fmag_norm > 1)      % force is out of range *)
            (* id = invFmax;            *)
            (* elseif (Fmag_norm <0)   % force is smaller than zero *)
            (* id = 0; *)
            (* else *)
            (* id = invFmax * interp2(Fmat, zmat, invFmat, Fmag_norm, zd_norm); *)
            (* end *)
            (* end *)
            
            (* 'invForceModel:36' [Fp, Fp_id] = min(abs(mag_params.F_grid(1,:)-Fmag)); *)
            FOR r1 := 0 TO 127 DO 
                varargin_1[r1] := ABS(mag_params.F_grid[r1 * 128] - a21);
            END_FOR;
            a21 := varargin_1[0];
            r1 := 0;
            FOR r2 := 0 TO 126 DO 
                A_tmp := varargin_1[r2 + 1];
                IF a21 > A_tmp THEN 
                    a21 := A_tmp;
                    r1 := r2 + 1;
                END_IF;
            END_FOR;
            (* 'invForceModel:37' [zp, zp_id] = min(abs(mag_params.z_grid(:,1)-zd)); *)
            FOR r2 := 0 TO 127 DO 
                varargin_1[r2] := ABS(mag_params.z_grid[r2] - maxval);
            END_FOR;
            maxval := varargin_1[0];
            r2 := 0;
            FOR r3 := 0 TO 126 DO 
                A_tmp := varargin_1[r3 + 1];
                IF maxval > A_tmp THEN 
                    maxval := A_tmp;
                    r2 := r3 + 1;
                END_IF;
            END_FOR;
            (* 'invForceModel:38' id = mag_params.i_grid(Fp_id,zp_id); *)
            id := mag_params.i_grid[(r2 * 128) + r1];
            (* 'invForceModel:39' if id<0 *)
            IF id < 0.0 THEN 
                (* 'invForceModel:40' id=0; *)
                id := 0.0;
            END_IF;
            (* %% Update previous values *)
            (* '<S1>:1:44' zd_prev = zd; *)
            zd_prev := zd;
            (* '<S1>:1:45' vd_prev = vd; *)
            vd_prev := vd;
            (* '<S1>:1:46' ad_prev = ad; *)
            ad_prev := ad;
            (* '<S1>:1:47' id_prev = id; *)
            id_prev := id;
        ELSE 
            (* '<S1>:1:48' else *)
            (* %% Keep previous values *)
            (* '<S1>:1:50' zd = zd_prev; *)
            zd := zd_prev;
            (* '<S1>:1:51' vd = vd_prev; *)
            vd := vd_prev;
            (* '<S1>:1:52' ad = ad_prev; *)
            ad := ad_prev;
            (* '<S1>:1:53' id = id_prev; *)
            id := id_prev;
        END_IF;
END_CASE;]]></ST>
    </Implementation>
    <LineIds Name="getTrajectory">
      <LineId Id="73" Count="226" />
      <LineId Id="9" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>